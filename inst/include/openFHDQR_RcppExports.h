// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef RCPP_openFHDQR_RCPPEXPORTS_H_GEN_
#define RCPP_openFHDQR_RCPPEXPORTS_H_GEN_

#include <RcppEigen.h>
#include <Rcpp.h>

namespace openFHDQR {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("openFHDQR", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("openFHDQR", "_openFHDQR_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in openFHDQR");
            }
        }
    }

    inline double shrink(double u, double alpha) {
        typedef SEXP(*Ptr_shrink)(SEXP,SEXP);
        static Ptr_shrink p_shrink = NULL;
        if (p_shrink == NULL) {
            validateSignature("double(*shrink)(double,double)");
            p_shrink = (Ptr_shrink)R_GetCCallable("openFHDQR", "_openFHDQR_shrink");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_shrink(Shield<SEXP>(Rcpp::wrap(u)), Shield<SEXP>(Rcpp::wrap(alpha)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

    inline double prox(double xi, double alpha, double tau) {
        typedef SEXP(*Ptr_prox)(SEXP,SEXP,SEXP);
        static Ptr_prox p_prox = NULL;
        if (p_prox == NULL) {
            validateSignature("double(*prox)(double,double,double)");
            p_prox = (Ptr_prox)R_GetCCallable("openFHDQR", "_openFHDQR_prox");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_prox(Shield<SEXP>(Rcpp::wrap(xi)), Shield<SEXP>(Rcpp::wrap(alpha)), Shield<SEXP>(Rcpp::wrap(tau)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

    inline Eigen::VectorXd update_theta(Eigen::VectorXd theta, double gamma, double sigma, Eigen::MatrixXd X, Eigen::VectorXd beta, Eigen::VectorXd z, Eigen::VectorXd y) {
        typedef SEXP(*Ptr_update_theta)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_update_theta p_update_theta = NULL;
        if (p_update_theta == NULL) {
            validateSignature("Eigen::VectorXd(*update_theta)(Eigen::VectorXd,double,double,Eigen::MatrixXd,Eigen::VectorXd,Eigen::VectorXd,Eigen::VectorXd)");
            p_update_theta = (Ptr_update_theta)R_GetCCallable("openFHDQR", "_openFHDQR_update_theta");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_update_theta(Shield<SEXP>(Rcpp::wrap(theta)), Shield<SEXP>(Rcpp::wrap(gamma)), Shield<SEXP>(Rcpp::wrap(sigma)), Shield<SEXP>(Rcpp::wrap(X)), Shield<SEXP>(Rcpp::wrap(beta)), Shield<SEXP>(Rcpp::wrap(z)), Shield<SEXP>(Rcpp::wrap(y)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Eigen::VectorXd >(rcpp_result_gen);
    }

}

#endif // RCPP_openFHDQR_RCPPEXPORTS_H_GEN_
